@page "/"
@using StoreApp.Models
@using StoreApp.Services

@inject ProductsService ProductService

<PageTitle>Products</PageTitle>

<MudTextField Placeholder="Search" AdornmentIcon="@Icons.Material.Filled.Search" @bind-Value="filter" Variant="Variant.Outlined"></MudTextField>

<MudChipSet @bind-SelectedChips="selected" MultiSelection="true" Filter="true">
    @foreach (var category in Categories)
    {
        <MudChip Text="@category.Name" Default="true"></MudChip>
    }
</MudChipSet>

<MudItem Class="d-flex flex-wrap">
    @foreach (var product in FilteredProducts)
    {
        <MudPaper Class="d-flex flex-column p-2 m-4 align-items-start justify-content-between" Width="300px" Height="500px" Elevation="3">
            <MudItem Class="w-100 d-flex justify-content-between align-items-center">
                <MudText Typo="Typo.h5">@product.Name</MudText>
            </MudItem>


            <MudImage ObjectPosition="@ObjectPosition.Center" Fluid="true" Class="rounded-lg" Src="@("\\images\\" + product.PictureName)"></MudImage>

            @if (product.Categories.Count() > 0)
            {
                <MudText Typo="Typo.h6">Product categories</MudText>
                <MudItem>
                    @foreach (var category in product.Categories)
                    {
                        <MudChip Class="cursor-pointer" Variant="Variant.Outlined">@category.Name</MudChip>
                    }
                </MudItem>
            }

            <MudText>@product.Description</MudText>

            <MudButton Class="align-self-end" Variant="Variant.Filled"><MudIcon Icon="@Icons.Material.Filled.ShoppingCart"></MudIcon>Buy</MudButton>
        </MudPaper>
    }
</MudItem>

@code {
    string filter = "";
    MudChip[] selected;
    IEnumerable<ProductModel> Products = Array.Empty<ProductModel>();
    IEnumerable<ProductType> Categories = Array.Empty<ProductType>();

    IEnumerable<ProductModel> FilteredProducts { get => Products.Where(p => {
            return (string.IsNullOrEmpty(filter) || p.Name.Contains(filter))
                    && (selected?.Any(m => p.Categories.Any(c=> c.Name == m.Text)) ?? false);
        });
    }

    protected async override Task OnInitializedAsync()
    {
        Products = await ProductService.GetProducts();
        Categories = await ProductService.GetCategories();

        await base.OnInitializedAsync();
    }
}